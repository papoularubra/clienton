# -*- coding: utf-8 -*-
"""ClientOn_v1-0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BUAJ_nFMbcPHrr3ifWEGjgfPVkrx0AR8
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Instalar Framework de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# -- Agente 1: Buscador de Informa√ß√µes -- #
##########################################
def agente_buscador(topico, data_de_hoje):

    buscador = Agent(
        name="agente_buscador",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um assistente de pesquisa especializado em due diligence de empresas.
        Sua tarefa √© realizar uma investiga√ß√£o abrangente sobre a reputa√ß√£o e hist√≥rico da empresa indicada em topico.
        Para isso, utilize a ferramenta de busca do Google (google_search) para:
        - Identificar informa√ß√µes b√°sicas da empresa:
        CNPJ, data de funda√ß√£o/tempo de exist√™ncia, endere√ßo, nicho de mercado principal e outras informa√ß√µes cadastrais relevantes.
        - Consultar a reputa√ß√£o online:
        Buscar e analisar avalia√ß√µes e reclama√ß√µes sobre a empresa em topico no site Reclame Aqui (reclameaqui.com.br).
        Explorar outras plataformas de avalia√ß√£o de consumidores e reputa√ß√£o de empresas (se dispon√≠veis e relevantes para o contexto brasileiro).
        Investigar coment√°rios em redes sociais da empresa ou sobre a empresa em topico.
        - Buscar not√≠cias sobre a empresa em topico, fotos e avalia√ß√µes no API Places do Google.
        - Verificar pend√™ncias legais e regulat√≥rias:
        Pesquisar por processos judiciais e men√ß√µes da empresa em topico no Jusbrasil e sites jur√≠dicos oficiais.
        Verificar a exist√™ncia de reclama√ß√µes ou processos administrativos contra a empresa em topico
        no Procon e outros √≥rg√£os reguladores relevantes para o nicho da empresa.
        Formato: Voc√™ vai realizar toda essa pesquisa, mas s√≥ vai mostrar as informa√ß√µes b√°sicas e fundamentais neste passo, em formato tabulado.
        """,
        description="Agente que busca informa√ß√µes no Google",
        tools=[google_search]
    )

    entrada_do_agente_buscador = f"Empresa: {topico}\nData de hoje: {data_de_hoje}"

    lancamentos = call_agent(buscador, entrada_do_agente_buscador)
    return lancamentos

################################################
# --- Agente 2: Avaliador de reputa√ß√£o --- #
################################################
def agente_avaliador(topico, lancamentos_buscados):
    avaliador = Agent(
        name="agente_avaliador",
        model="gemini-2.0-flash", #n√£o foi poss√≠vel usar um modelo mais avan√ßado, mas seria o ideal

        # Inserir as instru√ß√µes do Agente Avaliador #################################################
        instruction="""
        Voc√™ √© um orientador de consumidores especializado em due diligence de empresas.
        Com base em
        1 - nas informa√ß√µes levantadas pelo agente buscador, e/ou
        2 - na an√°lise dos requisitos de seguran√ßa do link indicado em t√≥pico, se for um link
        (Caso o usu√°rio pe√ßa informa√ß√µes a partir de um link, realize as a√ß√µes anteriores cab√≠veis e tamb√©m:
        - Identifique se o link √© seguro.
        - Identifique se o link √© de propriedade da empresa sugerida.
        - Verifique os selos de seguran√ßa do site, a pol√≠tica de privacidade, certificado SSL e outros crit√©rios de seguran√ßa
        que ajudem a evitar que o usu√°rio caia em um golpe.),
        voc√™ deve:
        - Usar a ferramenta de busca do Google (google_search) para indicar se a empresa √© confi√°vel ou n√£o e
        elaborar uma justificativa para a afirma√ß√£o, de maneira sucinta, linguagem clara e acess√≠vel.
        - Se poss√≠vel, categorize os tipos de reclama√ß√µes ou avalia√ß√µes
        (por exemplo, problemas com produto, atendimento, entrega) para fornecer uma vis√£o mais detalhada da reputa√ß√£o.
        - Mencione a data dos principais coment√°rios e categorize como "Elogio", "Reclama√ß√£o" ou "Neutro".
        Destaque a informa√ß√£o desse agente em rela√ß√£o aos outros, pois √© a mais importante.
        Destaque a conclus√£o sobre a empresa ou site ser confi√°vel ou n√£o colocando as express√µes "√â CONFI√ÅVEL" ou "N√ÉO √â CONFI√ÅVEL"
        em negrito e caixa alta, esta informa√ß√£o deve estar na primeira linha do texto.
        Formato: As informa√ß√µes devem ser sucintas, com linguagem clara e acess√≠vel, apresentadas de  modo tabulado
        com os dados positivos em verde e os negativos em vermelho.
        """,
        description="Agente que avalia a confiabilidade da empresa",
        tools=[google_search]
    )

    entrada_do_agente_avaliador = f"T√≥pico:{topico}\nLan√ßamentos buscados: {lancamentos_buscados}"
    # Executa o agente
    avaliacao_da_empresa = call_agent(avaliador, entrada_do_agente_avaliador)
    return avaliacao_da_empresa

######################################
# --- Agente 3: Consultor --- #
######################################
def agente_consultor(topico, avaliacao_da_empresa):
    consultor = Agent(
        name="agente_consultor",
        model="gemini-2.0-flash",
        instruction="""
            Voc√™ √© um consultor de consumidores, com foco em oferecer respostas claras e concisas para ajud√°-los
            no consumo consciente e seguro diante da escolha de uma empresa.
            Com base nas informa√ß√µes dos lacamentos_buscados e avaliacao_da_empresa, voc√™ deve:
            - Considerar o tom geral das avalia√ß√µes e reclama√ß√µes encontradas pelo agente_buscador e agente_avaliador.
            - Indicar ao cliente se deve ou n√£o negociar com a empresa ou comprar um produto dela.
            - Indicar para qual p√∫blico e finalidade a empresa √© indicada.
            - Se cab√≠vel, indicar aspectos de responsabilidade social, compliance, sustentabilidade e
            outras pr√°ticas que forem um diferencial da empresa.
            - Se a empresa for CONFI√ÅVEL: mencionar pontos positivos mais relevantes com base na recorr√™ncia do tema nas avalia√ß√µes.
            - Se cab√≠vel, indicar concorrente para compara√ß√£o, apenas se tiver qualidades compat√≠veis ou superiores √†s da empresa pesquisada.
            - Compare a reputa√ß√£o da empresa consultada com a m√©dia do setor, se houver dados dispon√≠veis.
            - Considere que empresas sem informa√ß√µes cadastrais online, como CNPJ, n√£o s√£o confi√°veis.
            Formato: Essa conclus√£o deve ser sucinta, com linguagem clara e acess√≠vel, ser tabulada, os dados positivos em verde e os negativos em vermelho.
            """,
        description="Agente consultor de negocios com foco no cliente"
    )
    entrada_do_agente_consultor = f"T√≥pico: {topico}\nPlano de post: {avaliacao_da_empresa}"
    # Executa o agente
    decisao_consumidor = call_agent(consultor, entrada_do_agente_consultor)
    return decisao_consumidor

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("üßê Iniciando o Sistema de Avalia√ß√£o de Confian√ßa de Empresas üßê")

# --- Obter o T√≥pico do Usu√°rio ---
topico = input("Digite o link do site ou o nome da empresa sobre a qual voc√™ deseja informa√ß√µes: ")

# Inserir l√≥gica do sistema de agentes ################################################
if not topico:
    print("Voc√™ esqueceu de digitar o t√≥pico!")
else:
    print(f"Maravilha! Vamos saber mais sobre a empresa {topico}")

    lancamentos_buscados = agente_buscador(topico, data_de_hoje)
    print("\n--- üìù Informa√ß√µes sobre a empresa ---\n")
    display(to_markdown(lancamentos_buscados))
    print("--------------------------------------------------------------")

    avaliacao_da_empresa = agente_avaliador(topico, lancamentos_buscados)
    print("\n---‚ùìAn√°lise de confian√ßa ---\n")
    display(to_markdown(avaliacao_da_empresa))
    print("--------------------------------------------------------------")

    decisao_consumidor = agente_consultor(topico, avaliacao_da_empresa)
    print("\n--- üë®‚Äç‚öñÔ∏è Sugest√£o de decis√£o para o consumidor ---\n")
    display(to_markdown(decisao_consumidor))
    print("--------------------------------------------------------------")